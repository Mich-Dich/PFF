Im using premake5 as a build system. I have 2 projects in my workspace and one uses the other at runtime. I dont want to link them.
I want to check if the helper programm is build and if this not build it. like when im using Visual Studio and right click on the project and click on "Build" it will build the helper programm.

can you help me adjust my scripts?

main premake script location: "PFF/premake5.lua"
editor premake script location: "PFF/PFF_editor/premake5.lua"
helper premake script location: "PFF/PFF_helper/premake5.lua"


in project root: PFF/premake5.lua:
```lua

include "dependencies.lua"

workspace "PFF"
	platforms "x64"
	startproject "PFF_editor"

	configurations
	{
		"Debug",
		"RelWithDebInfo",
		"Release",
	}

	flags
	{
		"MultiProcessorCompile"
	}

	-- TODO: PFF_USING_EDITOR should not be defined in the backaged builds of game
	defines
	{
		"PFF_USING_EDITOR",
	}

	outputs  = "%{cfg.buildcfg}-%{cfg.system}-%{cfg.architecture}"

group "dependencies"
	include "PFF/vendor/fastgltf"
	include "PFF/vendor/imgui"
	include "PFF/vendor/glfw"
group ""

function copy_content_of_dir(outputs, dir_names)
	
	local commands = {}
	for _, dir_name in ipairs(dir_names) do
		local target_dir = "%{wks.location}/bin/" .. outputs .. "/" .. dir_name
		local source_dir = "%{wks.location}/" .. dir_name

		print("Copying directory: " .. source_dir .. " to " .. target_dir)
		table.insert(commands, "{MKDIR} " .. target_dir)
		table.insert(commands, "{COPY} " .. source_dir .. " " .. target_dir)
	end
	
	return commands
end


group "Engine"
	include "PFF"
group ""

group "Tools"
	include "PFF_editor"
	include "PFF_helper"
group ""
```

main executable - PFF/PFF_editor/premake5.lua:
```lua

project "PFF_editor"
	location "%{wks.location}/PFF_editor"
	kind "ConsoleApp"
	language "C++"
	cppdialect "C++20"
	staticruntime "on"

	targetdir ("%{wks.location}/bin/" .. outputs  .. "/%{prj.name}")
	objdir ("%{wks.location}/bin-int/" .. outputs  .. "/%{prj.name}")

	pchheader "util/pch_editor.h"
	pchsource "src/util/pch_editor.cpp"

	-- glslc = "%{wks.location}/PFF/vendor/vulkan-glslc/glslc.exe"

	defines
	{
		"PFF_EDITOR",
	}

	files
	{
		"src/**.h",
		"src/**.cpp",
		"src/**.embed",
	}

	includedirs
	{
		"src",
		"assets",
		"content",
		"%{wks.location}/PFF/src",
		"%{wks.location}/PFF/vendor",

		"%{IncludeDir.entt}",
		"%{IncludeDir.glm}",
		"%{IncludeDir.ImGui}",
		"%{IncludeDir.ImGui}/backends/",
		"%{IncludeDir.fastgltf}",
		"%{IncludeDir.tinyobjloader}",
		"%{IncludeDir.stb_image}",
		"%{IncludeDir.ImGuizmo}",

		"C:/VulkanSDK/1.3.250.1/Include",
	}

    prebuildcommands
	{	-- Check if the helper executable exists
        "if not exist \"%{wks.location}/bin/" .. outputs  .. "/PFF_helper/PFF_helper.exe\" (",
        "    echo Building PFF_helper...",
		"    cd \"%{wks.location}\" && msbuild PFF.sln /p:Configuration=%{cfg.buildcfg} /t:PFF_helper && cd -",
        ")"
    }

	links
	{
		"PFF",
		"ImGui",
		"fastgltf",
	}
	
	filter "system:windows"
		systemversion "latest"

		defines { "PFF_PLATFORM_WINDOWS" }
		files { "../metadata/app_icon.rc" }

        postbuildcommands 
		{
			table.unpack(copy_content_of_dir(outputs, {"PFF_editor/shaders", "PFF_editor/defaults", "PFF_editor/assets"})),
		}
		
	filter "configurations:Debug"
		defines "PFF_EDITOR_DEBUG"
		runtime "Debug"
		symbols "on"
		
	filter "configurations:RelWithDebInfo"
		defines "PFF_EDITOR_RELEASE_WITH_DEBUG_INFO"
		runtime "Release"
		symbols "on"
		optimize "on"

	filter "configurations:Release"
		defines "PFF_EDITOR_RELEASE"
		runtime "Release"
		optimize "on"
```